raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[2,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
raw_df[,1] <- mdy_hms(raw_df[,1]) # reformat date
raw_df[,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[2,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
raw_df[,1] <- mdy_hm(raw_df[,1]) # reformat date
raw_df[,1]
file.names.table[2,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[2,1], sep='') #reads in the data files
raw_Sonde_rootdir
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
raw
raw
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[2,1]
ymd_hms(raw_df[,1]
ymd_hms(raw_df[,1])
file.names.table[2,1]
file.names.table[3,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[3,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
ymd_hms(raw_df[,1])
file.names.table[3,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[4,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[4,1]
file.names.table[5,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[5,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[6,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[6,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[7,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[7,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[8,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[8,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[9,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[9,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[10,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[10,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[11,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[11,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[12,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[12,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[13,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[13,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[14,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[14,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
ile.names.table[15,1]
file.names.table[15,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[15,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[16,1]
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[16,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
file.names.table[17,1]
Master_Table             <- data.frame()
for (m in 1:nrow(file.names.table)) {
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[17,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
# now for the dates - for some reason the sondes have diff format -  fix it up!
if(gsub(".*/","", (gsub("\\","/",raw_Sonde_rootdir, fixed=T))) %in%
c('082023_ASHC_Sonde.csv',
'082023_LAUR_Sonde.csv',
'092023_ASHC_Sonde.csv',
'092023_GOLD_Sonde.csv',
'102023_ASHC_Sonde.csv',
'102023_FENC_Sonde.csv',
'102023_GOLD_Sonde.csv',
'102023_LAUR_Sonde.csv',
'112023_ASHC_Sonde.csv',
'112023_FENC_Sonde.csv'))  { # date formatted as mdy_hm
raw_df[,1] <- mdy_hm(raw_df[,1]) # reformat as date using lubridate
} else if (gsub(".*/","", (gsub("\\","/",raw_Sonde_rootdir, fixed=T))) %in%
'072023_ASHC_Sonde.csv') {
raw_df[,1] <- mdy_hms(raw_df[,1]) # reformat as date using lubridate
} else (raw_df[,1] <- ymd_hms(raw_df[,1]) # reformat as date using lubridate
)
# add a column for the site
filename      <- file.names.table[m,1]
raw_df        <- raw_df %>%
dplyr::mutate(Site = sub(".*_(.*)_.*","\\1",filename),
Date = gsub("_.*","",filename))
Master_Table <- rbind(raw_df,Master_Table) #bind to a cumulative list dataframe
}
for (m in 1:nrow(file.names.table)) {
# call the dir of the csv file in loop
raw_Sonde_rootdir        <- paste(path.p,'/',file.names.table[m,1], sep='') #reads in the data files
# read it and fix dates and whatnot yay
D        <- readLines(raw_Sonde_rootdir)
ind      <- grep('Date Time',D) # the line where the data stars (theres a lot of junk beforehand)
# raw      <- read.csv(paste(path.p,'/',file.names.table[m,1], sep=''),skip=ind-1)
raw      <- read_csv(raw_Sonde_rootdir,skip=ind-1,col_types = cols())
columns  <- names(raw) # what are the column names?  - youll see why
raw_df   <- as.data.frame(raw) # ocnvert the dataframe now that you skipped the crappola
raw_df[2:(ncol(raw_df))] <- lapply(raw_df[2:(ncol(raw_df))],as.numeric) # convert all data  to numeric
# ommit all numeric data, also the format of the units does not pair between datasets, cannot rbind later
names(raw_df) <- sapply(strsplit(names(raw_df), '\\s*[()]'), `[`, 1)
raw_df[,1]
# now for the dates - for some reason the sondes have diff format -  fix it up!
if(gsub(".*/","", (gsub("\\","/",raw_Sonde_rootdir, fixed=T))) %in%
c('082023_ASHC_Sonde.csv',
'082023_LAUR_Sonde.csv',
'092023_ASHC_Sonde.csv',
'092023_GOLD_Sonde.csv',
'102023_ASHC_Sonde.csv',
'102023_FENC_Sonde.csv',
'102023_GOLD_Sonde.csv',
'102023_LAUR_Sonde.csv',
'112023_ASHC_Sonde.csv',
'112023_FENC_Sonde.csv'))  { # date formatted as mdy_hm
raw_df[,1] <- mdy_hm(raw_df[,1]) # reformat as date using lubridate
} else if (gsub(".*/","", (gsub("\\","/",raw_Sonde_rootdir, fixed=T))) %in%
'072023_ASHC_Sonde.csv') {
raw_df[,1] <- mdy_hms(raw_df[,1]) # reformat as date using lubridate
} else (raw_df[,1] <- ymd_hms(raw_df[,1]) # reformat as date using lubridate
)
# add a column for the site
filename      <- file.names.table[m,1]
raw_df        <- raw_df %>%
dplyr::mutate(Site = sub(".*_(.*)_.*","\\1",filename),
Date = gsub("_.*","",filename))
Master_Table <- rbind(raw_df,Master_Table) #bind to a cumulative list dataframe
}
View(Master_Table)
unique(Master_Table$Site)
# melt is akin to pivot_longer, but I like that its called melt so I prefer it
# Im melting Im melting
library(reshape2)
Master_Table_LONG <- Master_Table %>%
dplyr::select(-c("External Voltage", "Battery Capacity", "Barometric Pressure", "Date")) %>%
melt(id.vars = c("Date Time", "Site"),
measure.vars = c("Actual Conductivity", "Salinity", "Resistivity",
"Total Dissolved Solids" ,"RDO Concentration", "RDO Saturation",
"Oxygen Partial Pressure", "Chlorophyll-a Fluorescence", "pH", "pH mV",
"Temperature"))
Master_Table_LONG_means <- Master_Table %>%
dplyr::select(-c("External Voltage", "Battery Capacity", "Barometric Pressure", "Date")) %>%
dplyr::mutate(`Date Time` = as.factor(substr(`Date Time`,1,13))) %>% # remove minutes and seconds
melt(id.vars = c("Date Time", "Site"),
measure.vars = c("Actual Conductivity", "Salinity", "Resistivity",
"Total Dissolved Solids" ,"RDO Concentration", "RDO Saturation",
"Oxygen Partial Pressure", "Chlorophyll-a Fluorescence", "pH", "pH mV",
"Temperature")) %>%
dplyr::group_by(`Date Time`, Site, variable) %>%
summarise_each(funs(mean, sd, se=sd(.)/sqrt(n())), value) %>%
dplyr::mutate(`Date Time` = ymd_h(`Date Time`)) # reformat back to date
vars <- as.data.frame(
list(
as.character(
unique(
Master_Table_LONG_means$variable)))) %>%
dplyr::rename(dat = 1)
for(i in 1:nrow(vars)) {
# filter table for each variable
Table_by_var <- Master_Table_LONG_means %>%
dplyr::filter(variable %in% vars[i,])
# plot each
plot <- Table_by_var %>%
ggplot(aes(x=`Date Time`,
y=mean, # the mean values
group=Site)) + # call the new mean
geom_line(aes(group = factor(Site), # lines for site
linetype = Site),
size = 0.2,
position=position_dodge(.4)) +
# scale_linetype_manual(values=c("solid", "dashed")) +
geom_point(aes(shape=Site,
fill=Site)) +
scale_shape_manual(values=c(21, 22, 24, 25)) +
scale_fill_manual(values=c("#CC79A7", "#D55E00", "#009E73", "#0072B2")) +
geom_errorbar(aes(ymin=(mean)-(se),
ymax=(mean)+(se)),
width=0,position=position_dodge(.4)) +
facet_grid(rows = vars(Site), scales = "free_y") +
ggtitle(vars[i,]) +
theme_bw()
# print plots and name them as the var
pdf(paste0(path_out,"/raw_plots/",gsub(" ", "_", vars[i,]),".pdf"), height = 12, width = 15)
print(plot)
dev.off()
} # close the loop
# an example
Table_by_var %>%
dplyr::filter(variable %in% vars[11,]) %>%
ggplot(aes(x=`Date Time`,
y=mean, # the mean values
group=Site)) + # call the new mean
geom_line(aes(group = factor(Site), # lines for site
linetype = Site),
size = 0.2,
position=position_dodge(.4)) +
# scale_linetype_manual(values=c("solid", "dashed")) +
geom_point(aes(shape=Site,
fill=Site)) +
scale_shape_manual(values=c(21, 22, 24, 25)) +
scale_fill_manual(values=c("#CC79A7", "#D55E00", "#009E73", "#0072B2")) +
geom_errorbar(aes(ymin=(mean)-(se),
ymax=(mean)+(se)),
width=0,position=position_dodge(.4)) +
facet_grid(rows = vars(Site), scales = "free_y") +
ggtitle(vars[11,]) +
theme_bw()
CT_pH          <- Master_Table_LONG_means %>% dplyr::filter(variable == 'pH' & Site %in% c('FENC', 'ASHC'))
CT_Salinity    <- Master_Table_LONG_means %>% dplyr::filter(variable == 'Salinity' & Site %in% c('FENC', 'ASHC'))
CT_Temperature <- Master_Table_LONG_means %>% dplyr::filter(variable == 'Temperature' & Site %in% c('FENC', 'ASHC'))
CT_DO          <- Master_Table_LONG_means %>% dplyr::filter(variable == 'RDO Concentration' & Site %in% c('FENC', 'ASHC'))
CT_pH_all <- CT_pH %>% na.omit() %>%
dplyr::filter(`Date Time` > '2023-07-01 00:00:00' & `Date Time` < '2023-09-30 00:00:00' ) %>%
dplyr::mutate(Site = case_when(Site == 'ASHC' ~ 'Ash Creek', .default = 'Fence Creek')) %>%
ggplot(aes(x=`Date Time`,
y=mean, # the mean values
group=Site)) + # call the new mean
geom_line(aes(group = factor(Site), # lines for site
linetype = Site),
size = 0.2,
position=position_dodge(.4)) +
# scale_linetype_manual(values=c("solid", "dashed")) +
geom_point(aes(shape=Site,
fill=Site)) +
scale_shape_manual(values=c(21, 22, 24, 25)) +
scale_fill_manual(values=c("#D55E00",  "#0072B2")) + # "#CC79A7","#009E73"
geom_errorbar(aes(ymin=(mean)-(se),
ymax=(mean)+(se)),
width=0,position=position_dodge(.4)) +
facet_grid(rows = vars(Site)) + # , scales = "free_y" - if you wnat different y axis labels
ggtitle("pH - Summer") +
labs(x = "Time", y = "pH") +
theme_classic() +
theme(legend.position = "none")
CT_pH_all
vars[11,]
# an example
Table_by_var %>%
dplyr::filter(variable %in% vars[11,]) %>%
dplyr::filter(`Date Time` < '2023-10-01 00:00:00')
# an example
Table_by_var %>%
dplyr::filter(variable %in% vars[11,]) %>%
dplyr::filter(`Date Time` < '2023-10-01 00:00:00') %>%
ggplot(aes(x=`Date Time`,
y=mean, # the mean values
group=Site)) + # call the new mean
geom_line(aes(group = factor(Site), # lines for site
linetype = Site),
size = 0.2,
position=position_dodge(.4)) +
# scale_linetype_manual(values=c("solid", "dashed")) +
geom_point(aes(shape=Site,
fill=Site)) +
scale_shape_manual(values=c(21, 22, 24, 25)) +
scale_fill_manual(values=c("#CC79A7", "#D55E00", "#009E73", "#0072B2")) +
geom_errorbar(aes(ymin=(mean)-(se),
ymax=(mean)+(se)),
width=0,position=position_dodge(.4)) +
facet_grid(rows = vars(Site), scales = "free_y") +
ggtitle(vars[11,]) +
theme_bw()
# Temperature pre October 1st 2023
# why? we have a hefty gap in the FENC data during all october, this is
# a clean plot for Genevieve's NACE 2024 presentation
Sonde_Temp_2023 <- Table_by_var %>%
dplyr::filter(variable %in% vars[11,]) %>%
dplyr::filter(`Date Time` < '2023-10-01 00:00:00') %>%
ggplot(aes(x=`Date Time`,
y=mean, # the mean values
group=Site)) + # call the new mean
geom_line(aes(group = factor(Site), # lines for site
linetype = Site),
size = 0.2,
position=position_dodge(.4)) +
# scale_linetype_manual(values=c("solid", "dashed")) +
geom_point(aes(shape=Site,
fill=Site)) +
scale_shape_manual(values=c(21, 22, 24, 25)) +
scale_fill_manual(values=c("#CC79A7", "#D55E00", "#009E73", "#0072B2")) +
geom_errorbar(aes(ymin=(mean)-(se),
ymax=(mean)+(se)),
width=0,position=position_dodge(.4)) +
facet_grid(rows = vars(Site), scales = "free_y") +
ggtitle(vars[11,]) +
theme_bw()
print(Sonde_Temp_2023)
pdf(paste0(path_out,"/raw_plots/Temperature_JuneOct_2023.pdf"), height = 12, width = 15)
print(Sonde_Temp_2023)
dev.off()
# Temperature pre October 1st 2023
# why? we have a hefty gap in the FENC data during all october, this is
# a clean plot for Genevieve's NACE 2024 presentation
Sonde_Temp_2023 <- Table_by_var %>%
dplyr::filter(variable %in% vars[11,]) %>%
dplyr::filter(`Date Time` > '2023-06-15 00:00:00' & `Date Time` < '2023-10-01 00:00:00') %>%
ggplot(aes(x=`Date Time`,
y=mean, # the mean values
group=Site)) + # call the new mean
geom_line(aes(group = factor(Site), # lines for site
linetype = Site),
size = 0.2,
position=position_dodge(.4)) +
# scale_linetype_manual(values=c("solid", "dashed")) +
geom_point(aes(shape=Site,
fill=Site)) +
scale_shape_manual(values=c(21, 22, 24, 25)) +
scale_fill_manual(values=c("#CC79A7", "#D55E00", "#009E73", "#0072B2")) +
geom_errorbar(aes(ymin=(mean)-(se),
ymax=(mean)+(se)),
width=0,position=position_dodge(.4)) +
facet_grid(rows = vars(Site), scales = "free_y") +
ggtitle(vars[11,]) +
theme_bw()
print(Sonde_Temp_2023)
pdf(paste0(path_out,"/raw_plots/Temperature_JuneOct_2023.pdf"), height = 12, width = 15)
print(Sonde_Temp_2023)
dev.off()
